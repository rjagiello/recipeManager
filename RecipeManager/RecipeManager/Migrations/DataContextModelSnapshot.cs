// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeManager.Data;

namespace RecipeManager.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RecipeManager.Models.Fridge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("RecipeManager.Models.Friendship", b =>
                {
                    b.Property<int>("UserFollowId");

                    b.Property<int>("UserIsFollowedId");

                    b.Property<bool>("IsAccepted");

                    b.HasKey("UserFollowId", "UserIsFollowedId");

                    b.HasIndex("UserIsFollowedId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("RecipeManager.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("RecipeId");

                    b.Property<string>("Url");

                    b.Property<int?>("UserId");

                    b.Property<string>("public_id");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("RecipeManager.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Count");

                    b.Property<int?>("FridgeId");

                    b.Property<bool>("IsInFridge");

                    b.Property<string>("Name");

                    b.Property<int?>("RecipeId");

                    b.Property<int?>("ShoppingId");

                    b.Property<int>("Unit");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("ShoppingId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RecipeManager.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category");

                    b.Property<string>("Description");

                    b.Property<bool>("IsCompleteProducts");

                    b.Property<bool>("IsListAdded");

                    b.Property<string>("Name");

                    b.Property<int?>("PhotoId");

                    b.Property<int>("Portions");

                    b.Property<string>("Preparation");

                    b.Property<int?>("ShoppingId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipeManager.Models.Shopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("RecipeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId")
                        .IsUnique()
                        .HasFilter("[RecipeId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Shoppings");
                });

            modelBuilder.Entity("RecipeManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<int?>("FridgeId");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<string>("PasswordRemindToken");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int?>("PhotoId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId")
                        .IsUnique()
                        .HasFilter("[FridgeId] IS NOT NULL");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RecipeManager.Models.Friendship", b =>
                {
                    b.HasOne("RecipeManager.Models.User", "UserFollow")
                        .WithMany("UserIsFollowed")
                        .HasForeignKey("UserFollowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RecipeManager.Models.User", "UserIsFollowed")
                        .WithMany("UserFollow")
                        .HasForeignKey("UserIsFollowedId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RecipeManager.Models.Product", b =>
                {
                    b.HasOne("RecipeManager.Models.Fridge", "Fridge")
                        .WithMany("Products")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RecipeManager.Models.Recipe", "Recipe")
                        .WithMany("Products")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RecipeManager.Models.Shopping", "Shopping")
                        .WithMany("Products")
                        .HasForeignKey("ShoppingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RecipeManager.Models.Recipe", b =>
                {
                    b.HasOne("RecipeManager.Models.Photo", "Photo")
                        .WithOne("Recipe")
                        .HasForeignKey("RecipeManager.Models.Recipe", "PhotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RecipeManager.Models.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecipeManager.Models.Shopping", b =>
                {
                    b.HasOne("RecipeManager.Models.Recipe", "Recipe")
                        .WithOne("Shopping")
                        .HasForeignKey("RecipeManager.Models.Shopping", "RecipeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RecipeManager.Models.User", "User")
                        .WithMany("Shoppings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecipeManager.Models.User", b =>
                {
                    b.HasOne("RecipeManager.Models.Fridge", "Fridge")
                        .WithOne("User")
                        .HasForeignKey("RecipeManager.Models.User", "FridgeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RecipeManager.Models.Photo", "Photo")
                        .WithOne("User")
                        .HasForeignKey("RecipeManager.Models.User", "PhotoId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
